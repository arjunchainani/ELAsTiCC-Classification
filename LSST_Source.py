import matplotlib.pyplot as plt

class LSST_Source:

    # List of features actually stored in the instance of the class.
    features = ['SNID', 'RA', 'DEC', 'SNTYPE', 'MWEBV', 'MWEBV_ERR', 'REDSHIFT_HELIO', 'REDSHIFT_HELIO_ERR', 'REDSHIFT_FINAL', 'REDSHIFT_FINAL_ERR', 'VPEC', 'VPEC_ERR', 'HOSTGAL_OBJID', 'HOSTGAL_FLAG', 'HOSTGAL_PHOTOZ', 'HOSTGAL_PHOTOZ_ERR', 'HOSTGAL_SPECZ', 'HOSTGAL_SPECZ_ERR', 'HOSTGAL_RA', 'HOSTGAL_DEC', 'HOSTGAL_SNSEP', 'HOSTGAL_DDLR', 'HOSTGAL_CONFUSION', 'HOSTGAL_LOGMASS', 'HOSTGAL_LOGMASS_ERR', 'HOSTGAL_LOGSFR', 'HOSTGAL_LOGSFR_ERR', 'HOSTGAL_LOGsSFR', 'HOSTGAL_LOGsSFR_ERR', 'HOSTGAL_COLOR', 'HOSTGAL_COLOR_ERR', 'HOSTGAL_ELLIPTICITY', 'HOSTGAL_OBJID2', 'HOSTGAL_SQRADIUS', 'HOSTGAL_OBJID_UNIQUE', 'HOSTGAL_ZPHOT_Q000', 'HOSTGAL_ZPHOT_Q010', 'HOSTGAL_ZPHOT_Q020', 'HOSTGAL_ZPHOT_Q030', 'HOSTGAL_ZPHOT_Q040', 'HOSTGAL_ZPHOT_Q050', 'HOSTGAL_ZPHOT_Q060', 'HOSTGAL_ZPHOT_Q070', 'HOSTGAL_ZPHOT_Q080', 'HOSTGAL_ZPHOT_Q090', 'HOSTGAL_ZPHOT_Q100', 'HOSTGAL_MAG_u', 'HOSTGAL_MAG_g', 'HOSTGAL_MAG_r', 'HOSTGAL_MAG_i', 'HOSTGAL_MAG_z', 'HOSTGAL_MAG_Y', 'HOSTGAL_MAGERR_u', 'HOSTGAL_MAGERR_g', 'HOSTGAL_MAGERR_r', 'HOSTGAL_MAGERR_i', 'HOSTGAL_MAGERR_z', 'HOSTGAL_MAGERR_Y', 'HOSTGAL2_OBJID', 'HOSTGAL2_FLAG', 'HOSTGAL2_PHOTOZ', 'HOSTGAL2_PHOTOZ_ERR', 'HOSTGAL2_SPECZ', 'HOSTGAL2_SPECZ_ERR', 'HOSTGAL2_RA', 'HOSTGAL2_DEC', 'HOSTGAL2_SNSEP', 'HOSTGAL2_DDLR', 'HOSTGAL2_LOGMASS', 'HOSTGAL2_LOGMASS_ERR', 'HOSTGAL2_LOGSFR', 'HOSTGAL2_LOGSFR_ERR', 'HOSTGAL2_LOGsSFR', 'HOSTGAL2_LOGsSFR_ERR', 'HOSTGAL2_COLOR', 'HOSTGAL2_COLOR_ERR', 'HOSTGAL2_ELLIPTICITY', 'HOSTGAL2_OBJID2', 'HOSTGAL2_SQRADIUS', 'HOSTGAL2_OBJID_UNIQUE', 'HOSTGAL2_MAG_u', 'HOSTGAL2_MAG_g', 'HOSTGAL2_MAG_r', 'HOSTGAL2_MAG_i', 'HOSTGAL2_MAG_z', 'HOSTGAL2_MAG_Y', 'HOSTGAL2_MAGERR_u', 'HOSTGAL2_MAGERR_g', 'HOSTGAL2_MAGERR_r', 'HOSTGAL2_MAGERR_i', 'HOSTGAL2_MAGERR_z', 'HOSTGAL2_MAGERR_Y', 'HOSTGAL2_ZPHOT_Q000', 'HOSTGAL2_ZPHOT_Q010', 'HOSTGAL2_ZPHOT_Q020', 'HOSTGAL2_ZPHOT_Q030', 'HOSTGAL2_ZPHOT_Q040', 'HOSTGAL2_ZPHOT_Q050', 'HOSTGAL2_ZPHOT_Q060', 'HOSTGAL2_ZPHOT_Q070', 'HOSTGAL2_ZPHOT_Q080', 'HOSTGAL2_ZPHOT_Q090', 'HOSTGAL2_ZPHOT_Q100', 'HOSTGAL_SB_FLUXCAL_u', 'HOSTGAL_SB_FLUXCAL_g', 'HOSTGAL_SB_FLUXCAL_r', 'HOSTGAL_SB_FLUXCAL_i', 'HOSTGAL_SB_FLUXCAL_z', 'HOSTGAL_SB_FLUXCAL_Y', 'PEAKMJD', 'MJD_TRIGGER', 'MJD_DETECT_FIRST', 'MJD_DETECT_LAST', 'SEARCH_TYPE', 'SIM_MODEL_NAME', 'SIM_MODEL_INDEX', 'SIM_TYPE_INDEX', 'SIM_TYPE_NAME', 'SIM_TEMPLATE_INDEX', 'SIM_LIBID', 'SIM_NGEN_LIBID', 'SIM_NOBS_UNDEFINED', 'SIM_SEARCHEFF_MASK', 'SIM_REDSHIFT_HELIO', 'SIM_REDSHIFT_CMB', 'SIM_REDSHIFT_HOST', 'SIM_REDSHIFT_FLAG', 'SIM_VPEC', 'SIM_HOSTLIB_GALID', 'SIM_HOSTLIB(g_obs)', 'SIM_HOSTLIB(r_obs)', 'SIM_HOSTLIB(i_obs)', 'SIM_DLMU', 'SIM_LENSDMU', 'SIM_RA', 'SIM_DEC', 'SIM_MWEBV', 'SIM_PEAKMJD', 'SIM_MJD_EXPLODE', 'SIM_MAGSMEAR_COH', 'SIM_AV', 'SIM_RV', 'SIM_PEAKMAG_u', 'SIM_PEAKMAG_g', 'SIM_PEAKMAG_r', 'SIM_PEAKMAG_i', 'SIM_PEAKMAG_z', 'SIM_PEAKMAG_Y', 'SIM_EXPOSURE_u', 'SIM_EXPOSURE_g', 'SIM_EXPOSURE_r', 'SIM_EXPOSURE_i', 'SIM_EXPOSURE_z', 'SIM_EXPOSURE_Y', 'SIM_GALFRAC_u', 'SIM_GALFRAC_g', 'SIM_GALFRAC_r', 'SIM_GALFRAC_i', 'SIM_GALFRAC_z', 'SIM_GALFRAC_Y', 'SIM_SUBSAMPLE_INDEX', 'MJD', 'BAND', 'CCDNUM', 'FIELD', 'PHOTFLAG', 'PHOTPROB', 'FLUXCAL', 'FLUXCALERR', 'PSF_SIG1', 'PSF_SIG2', 'PSF_RATIO', 'SKY_SIG', 'SKY_SIG_T', 'RDNOISE', 'ZEROPT', 'ZEROPT_ERR', 'GAIN', 'XPIX', 'YPIX', 'SIM_FLUXCAL_HOSTERR', 'SIM_MAGOBS']

    def __init__(self, parquet_row, class_label) -> None:

        # Set all the class attributes
        setattr(self, 'ELASTICC_class', class_label)

        for key in parquet_row.columns:
            if key in self.features:
                setattr(self, key, parquet_row[key].to_numpy()[0])

    def plot_lightcurve(self) -> None:

        plt.scatter(self.MJD, self.FLUXCAL)

        plt.show()

        pass

    def get_light_curve(self) -> dict:
        pass

    def get_host_galaxy_properties(self) -> dict:
        pass

    def get_z(self) -> dict:
        pass

    def get_classification_hierarchy(self):
        pass

    def get_ML_Tensor(self):
        pass

    def get_augmented_sources(self):
        pass

    def __str__(self) -> str:

        to_return = str(vars(self))
        return to_return


if __name__=='__main__':

    print('Hello world')

